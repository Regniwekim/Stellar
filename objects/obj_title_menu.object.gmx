<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_logo</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize variables
selected = 0;
rot = 0;
item = 0;

//set position of menu
menu_x = room_width/2;
menu_y = (room_height/2);

//set size of menu
menu_width = 800;
menu_height = 180;

//pressed
pressed = 0;
mxp = 0;
myp = 0;
transition = noone;
spawn_transition = 1;
globalvar quit_needed;
quit_needed = 1;

image_speed = 0.5;


menu_choices = 5;

if (os_type != os_android) {
    menu_choices -= 1;
}

if (os_type != os_android) {
    instance_create(room_width-118,62,obj_playstore_button);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//change the selection using arrows

if (!instance_exists(obj_transition)) {
if (device_mouse_check_button_pressed(0,mb_left)) {
    if (instance_exists(obj_transition)) {
        spawn_transition = 0;
    }
    else {
        spawn_transition = 1;
    }
        if (mouse_y &gt; room_height/2 &amp;&amp; mouse_y &lt; room_height-96 &amp;&amp; mouse_x &gt; 112 &amp;&amp; mouse_x &lt; room_width-112) {
            if (pressed == 0) {
                mxp = mouse_x;
                myp = mouse_y;
                pressed = 1;
            }
        }
}

if (device_mouse_check_button_released(0,mb_left) &amp;&amp; !instance_exists(obj_transition)) {
    if (pressed == 1) {
        var swipe_dist = mxp-mouse_x;
        if (swipe_dist &lt; -32 || mouse_x &gt; (room_width/2)+128) {
            selected += 1;
            //quit_created = 0;
        }
        else if (swipe_dist &gt; 32 || mouse_x &lt; (room_width/2)-128) {
            selected -= 1;
            //quit_created = 0;
        }
        else if (swipe_dist &gt;= -32 &amp;&amp; swipe_dist &lt;= 32) {
            if (spawn_transition = 1) {
                transition = instance_create(room_width/2,menu_y+lengthdir_y(menu_height/2,(rot-90)+j*(360/menu_choices)),obj_transition);
                transition.image_xscale = 0.75+((lengthdir_y(menu_height/1.5,(rot-90)+j*(360/menu_choices))/(menu_height*1.5)));
                transition.image_yscale = 0.75+((lengthdir_y(menu_height/1.5,(rot-90)+j*(360/menu_choices))/(menu_height*1.5)));
                switch (item) {
                    case 0: 
                    transition.sprite_index = spr_combo;
                    break;
                    
                    case 1: 
                    transition.sprite_index = spr_timed;
                    break;
                    
                    case 2: 
                    transition.sprite_index = spr_endless;
                    break;
                    
                    case 3:
                    transition.sprite_index = spr_tutorial;
                    break;
                    
                    case 4:
                    transition.sprite_index = spr_exit;
                    break;
                    
                    default:
                    transition.sprite_index = spr_blank;
                    break;
                }
            }
        }
        pressed = 0;
    }
}

if (keyboard_check_pressed(vk_right)) {
    selected -= 1;
}

if (keyboard_check_pressed(vk_left)) {
    selected += 1;
}

if (keyboard_check_pressed(vk_enter)) {
    if (spawn_transition = 1) {
    transition = instance_create(room_width/2,menu_y+lengthdir_y(menu_height/2,(rot-90)+j*(360/menu_choices)),obj_transition);
    transition.image_xscale = 0.75+((lengthdir_y(menu_height/1.5,(rot-90)+j*(360/menu_choices))/(menu_height*1.5)));
    transition.image_yscale = 0.75+((lengthdir_y(menu_height/1.5,(rot-90)+j*(360/menu_choices))/(menu_height*1.5)));
    switch (item) {
        case 0: 
            transition.sprite_index = spr_combo;
            break;
        
        case 1: 
            transition.sprite_index = spr_timed;
            break;
                        
        case 2: 
            transition.sprite_index = spr_endless;
            break;
                        
        case 3:
            transition.sprite_index = spr_tutorial;
            break;
                        
        case 4:
            transition.sprite_index = spr_exit;
            break;
                        
        default:
            transition.sprite_index = spr_blank;
            break;
        }
    }
}
}
if (instance_exists(transition)) {
    transition.x = menu_x+lengthdir_x(menu_width/2,(rot-90)+j*(360/menu_choices));
    transition.y = menu_y+lengthdir_y(menu_height/2,(rot-90)+j*(360/menu_choices));
}

if (keyboard_check_pressed(vk_backspace) || keyboard_check_pressed(vk_escape)) {
    instance_create(0,0,obj_pause);
}

//rotate towards selection
rot -= angle_difference(rot,selected*(360/menu_choices))/(0.2*room_speed);

//set item variable to image index
item = -selected mod menu_choices;

if (item &lt; 0) {
    item += menu_choices;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ident = ds_map_find_value(async_load, "type");
var loaded = ds_map_find_value(async_load, "loaded");

if (ident == "banner_load") {
    var bw = ds_map_find_value(async_load, "width");
    var bh = ds_map_find_value(async_load, "height");
    var px = ((sw-bw)/2);
    var py = (sh-bh-5);
    GoogleMobileAds_MoveBanner(px,py);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_texture_flush();

scr_highscore_init();

globalvar mus_vol, sfx_vol, mode;

mus_vol = 1;
sfx_vol = 1;
scr_tutorial_status();

mode = 2;

tut_completed = 0;

arc_tut = 0;

timed_tut = 0;

endless_tut = 0;

points = 0;

globalvar sw, sh;

sw = window_get_width();
sh = window_get_height();

randomize();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
//Twitter tweet
url_open("https://twitter.com/intent/tweet?text=I got a new high score of " + string(points) +" on &amp;hashtags=Stellar");

//Facebook like
url_open("http://www.facebook.com/plugins/like.php?href=http://www.facebook.com/StellarAndroid");

//Youtube subscribe
url_open("https://www.youtube.com/subscription_center?add_user=regniwekim1");
*/

//Globals to call before everything else
global.Auth = false;
global.my_name = "";


if (os_is_network_connected()) {
    if (os_type = os_android) {
        GoogleMobileAds_Init("");
        GoogleMobileAds_AddBanner("xxx"/*banner ad id goes here*/, GoogleMobileAds_Banner);
        globalvar ads;
        ads = 1;
    }
    else {
        ads = 0;
    }
}
globalvar app_id;
    app_id = 0//app_id goes here;
    
globalvar share_link, icon_link;
share_link = "https://play.google.com/store/apps/details?id=com.regniwekim.Stellar";
icon_link = "https://http://i.imgur.com/YMuITCq.png";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//set vars
var pr, i;

pr = ds_priority_create();
i = 0;

//add menu items to priotity queue
repeat(menu_choices) {
    ds_priority_add(pr,i,lengthdir_y(1,(rot-90)+i*(360/menu_choices)));
    i+=1;
}

//draw the menu
repeat (menu_choices) {
    j = ds_priority_delete_min(pr);
    draw_sprite_ext(spr_menu_choices,j,
    menu_x+lengthdir_x(menu_width/2,(rot-90)+j*(360/menu_choices)),
    menu_y+lengthdir_y(menu_height/2,(rot-90)+j*(360/menu_choices)),
    0.75+((lengthdir_y(menu_height/1.5,(rot-90)+j*(360/menu_choices))/(menu_height*1.5))),
    0.75+((lengthdir_y(menu_height/1.5,(rot-90)+j*(360/menu_choices))/(menu_height*1.5))),
    0,c_white,0.5+((lengthdir_y(menu_height/1.5,(rot-90)+j*(360/menu_choices))/(menu_height*1.5))));
}

//remove ds priority
ds_priority_destroy(pr);

draw_sprite(spr_logo,image_index,room_width/2,(room_height/2)-128);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
