<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>stars_active = 1;
stars_spawned = 0;
star_text = 0;

meteors_active = 0;
meteors_spawned = 0;
meteors_destroyed = 0;
meteor_alarm = 0;
meteor_text = 0;

rainbow_active = 0;
rainbow_spawned = 0;
rainbow_alarm = 0;
rainbow_text = 0;

finish_text = 0;
finish_alarm = 0;

pause = room_speed*15;
game_paused = 0;

text = "Welcome to Stellar!#Tap on stars of the same color to form constellations and earn points.#When a star from a constellation reaches the bottom of the screen,#or you start a constellation of a new color,#your constellation will burst#and you'll be awarded for how many stars you linked";
text_draw = 0;
text_live = room_speed*20;
alarm[0] = room_speed*2;
alarm[2] = text_live;
instance_create(view_xview[0]+32,view_yview[0]+32,obj_option_button);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rainbow_text = 0;
finish_text = 1;
text_live = room_speed*20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(random_range(-256,room_width+256),-256,obj_tutorial_rainbow);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (meteors_active = 1) {
    xx = random_range(144,room_width-144);
    instance_create(xx,-144,obj_tutorial_meteor);
}
//alarm[0] = (random_range(room_speed*4,room_speed*6));
alarm[1] = (random_range(room_speed*4,room_speed*6));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (stars_active = 1) {
    xx = round((random_range(144,room_width-144)/64)*64);
    
    if !place_meeting(xx,-144,obj_star) {
        type = choose(type,type,type,type,0,1,2,3,4);
        star = instance_create(xx,-144,obj_tutorial_star);
        star.type = type;
        alarm[0] = random_range(room_speed/4,room_speed);
    }
    else {
        alarm[0] = 1;
    }
}
else {
    alarm[0] = random_range(room_speed/4,room_speed);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_backspace) || keyboard_check_pressed(vk_escape)) {
    instance_create(0,0,obj_pause);
}

if (stars_spawned == 20) {
    meteors_active = 1;
    meteor_text = 1;
    star_text = 0;
    rainbow_text = 0;
    if (meteor_alarm = 0) {
        alarm[1] = irandom(room_speed*3);
        meteor_alarm = 1;
    }
}

if (meteors_destroyed == 3) {
    rainbow_active = 1;
    meteor_text = 0;
    rainbow_text = 1;
    star_text = 0;
    if (rainbow_alarm = 0) {
        text_live = room_speed*20;
        alarm[3] = irandom(room_speed*3)+room_speed;
        rainbow_alarm = 1;
    }
}

if (rainbow_active == 1) {
    chance = irandom(1000);
    if chance = 995 {
        instance_create(random_range(-256,room_width+256),-256,obj_tutorial_rainbow);
    }
}

if (meteor_text == 1) {
        text = "Meteors will sometimes fall from the sky.#If they reach the bottom, you will lose some points.#Make sure to tap them to destroy them!";
    }
if (rainbow_text == 1) {
        text = "Shooting stars will sometimes shoot across the screen.#Tap them to pop all stars on the screen and earn bonus points!";
}
if (finish_text == 1) {
    text = "Congratulations on completing the tutorial.#Press the back button to return to the main menu at any time.";
}

if (device_mouse_check_button_pressed(0,mb_left) &amp;&amp; !collision_point(mouse_x,mouse_y,par_clickable,0,0)) {
        if (text_live &lt; (room_speed*20)-(room_speed*2)) {
            text_live = 0;
            meteors_active = 1;
        }
}

text_live -= 1;

///Limit star clicking
if(global.limit_clicks == 1){
    step_count+=1;
    if(step_count &gt; 2){ // Adjust this to taste
        step_count = 0;
        global.limit_clicks = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_particle_clean();

tut_completed = 1;

scr_tutorial_save();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_init_variables();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw GUI
draw_set_halign(fa_center);
draw_set_valign(fa_top);
draw_set_color(c_white);
draw_set_font(fnt_sm);
draw_text(sw/2,8,"SCORE: " + string(points));

if (text_live &gt; 0) {
    draw_set_color(c_black);
    draw_set_alpha(0.2);
    draw_set_font(fnt_sm);
    draw_rectangle(-32,(sh/2)-16-(string_height(text)/2),sw+32,(sh/2)+16+(string_height(text)/2),0);
    draw_set_alpha(1);
    draw_set_valign(fa_center);
    draw_set_halign(fa_center);
    draw_set_color(c_white);
    draw_set_font(fnt_sm);
    draw_text(sw/2,sh/2,text);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch c_type {
    case 0: col1 = col_dkred; col2 = col_ltred; break;
    case 1: col1 = col_dkorange; col2 = col_ltorange; break;
    case 2: col1 = col_dkyellow; col2 = col_ltyellow; break;
    case 3: col1 = col_dkgreen; col2 = col_ltgreen; break;
    case 4: col1 = col_dkblue; col2 = col_ltblue; break;
    default: col1 = c_white; col2 = c_white; break;
}

if c_type != 100 {
    var i;
    
    for (i=0;i&lt;chain-1;i+=1) {
        star1 = global.link[i];
        star2 = global.link[i+1];
        draw_set_color(col1);
        draw_line_width(star1.x,star1.y,star2.x,star2.y,8);
        draw_set_color(col2);
        draw_line_width(star1.x,star1.y,star2.x,star2.y,4);
        draw_set_alpha(0.5);
        draw_set_color(c_white);
        draw_line_width(star1.x,star1.y,star2.x,star2.y,2);
        draw_set_alpha(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
